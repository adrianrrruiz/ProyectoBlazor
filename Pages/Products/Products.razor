@page "/product"
@inject ILogger<Products> logger;
@* Ac√° se injectan las dependencias *@
@inject IProductService productService;
@inject NavigationManager navigationManager

<PageTitle>Products</PageTitle>

<h1>Products</h1>
<button class="btn btn-dark" @onclick="@(()=> navigationManager.NavigateTo("/addproduct"))">Add Product</button>

@* Para validar que products no sea nulo o este vacio *@
@if(products?.Count > 0){
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.images[0]" alt="Product" loading="lazy" width="270" height="210">
                <div class="card-body">
                    <h4><b>@product.title</b></h4>
                    <p>@product.price?.ToString("C")</p>
                </div>
            </div>
        }
    </div>
}else{
    <p>"No hay productos para mostrar"</p>
}

@code {
    private List<Product>? products;

    //Asignar datos iniciales que se van a mostrar dentro del componente
    protected override async Task OnInitializedAsync()
    {
        products = await GetProducts();
    }

    //Para llamar el servicio
    private async Task<List<Product>> GetProducts(){
        return await productService.Get();
    }
}